'use client'

import { useWallet } from '@solana/wallet-adapter-react';
import { useEffect, useState } from 'react';
import { Connection } from '@solana/web3.js';
import { getMyCreatedTokens } from '@/lib/getCreatedTokens';

const connection = new Connection('https://api.devnet.solana.com');

type Token = {
  mint_address: string;
  created_at: string;
};

export default function ProfilePage() {
  const { publicKey, disconnect } = useWallet();
  const [balance, setBalance] = useState<number | null>(null);
  const [joinedDAOs, setJoinedDAOs] = useState<string[]>([]); // –º–æ–∫–æ–≤—ã–µ DAO
  const [tokens, setTokens] = useState<Token[]>([]);

  useEffect(() => {
    if (!publicKey) return;
    fetch(`/api/getMyTokens?wallet=${publicKey.toBase58()}`)
      .then(res => res.json())
      .then(setTokens);
  }, [publicKey]);


  useEffect(() => {
    const fetchBalance = async () => {
      if (publicKey) {
        const lamports = await connection.getBalance(publicKey);
        setBalance(lamports / 1_000_000_000); // –ø–µ—Ä–µ–≤–µ–ª–∏ –≤ SOL
      }
    };

    fetchBalance();

    // –ú–æ–∫–æ–≤—ã–µ DAO
    setJoinedDAOs([
      'Kyiv Builders DAO',
      'Locura Test DAO',
      'ETH DAO Lviv'
    ]);
  }, [publicKey]);

  if (!publicKey) {
    return (
      <div className="p-6 text-center text-gray-700">
        <h2 className="text-xl font-bold mb-2">üë§ –ü—Ä–æ—Ñ–∏–ª—å</h2>
        <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.</p>
      </div>
    );
  }

  return (
    <div className="max-w-xl mx-auto p-6 space-y-4">
      <h1 className="text-2xl font-bold">üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>

      <div className="bg-white/5 p-4 rounded-xl border border-white/10 shadow">
        <h2 className="text-lg font-semibold mb-1">üíº –ê–¥—Ä–µ—Å:</h2>
        <p className="text-sm text-gray-300">{publicKey.toBase58()}</p>
      </div>

      <div className="bg-white/5 p-4 rounded-xl border border-white/10 shadow">
        <h2 className="text-lg font-semibold mb-1">üí∞ –ë–∞–ª–∞–Ω—Å:</h2>
        <p>{balance !== null ? `${balance.toFixed(3)} SOL` : '–ó–∞–≥—Ä—É–∑–∫–∞...'}</p>
      </div>

      <div className="bg-white/5 p-4 rounded-xl border border-white/10 shadow">
        <h1 className="text-2xl font-bold mb-4">–ú–æ–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã</h1>
        {tokens.length === 0 ? (
          <p>–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç</p>
        ) : (
          <ul className="space-y-2">
            {tokens.map((t) => (
              <li key={t.mint_address} className="border p-3 rounded">
                <div>Mint: {t.mint_address}</div>
                <div className="text-sm text-gray-500">–°–æ–∑–¥–∞–Ω: {new Date(t.created_at).toLocaleString()}</div>
              </li>
            ))}
          </ul>
        )}
      </div>

      <div className="bg-white/5 p-4 rounded-xl border border-white/10 shadow">
        <h2 className="text-lg font-semibold mb-2">üèõ DAO-—É—á–∞—Å—Ç–∏–µ:</h2>
        <ul className="list-disc pl-5 space-y-1 text-gray-200">
          {joinedDAOs.map((dao, index) => (
            <li key={index}>{dao}</li>
          ))}
        </ul>
      </div>

      <button
        onClick={disconnect}
        className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition"
      >
        üîå –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫
      </button>
    </div>
  );
}